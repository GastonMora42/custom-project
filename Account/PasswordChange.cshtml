
@{
    Layout = "_AccountLayout.cshtml";
    var db = Database.Open("IntranetConnection");
    var products = db.Query("SELECT dbo.USERS_TABLE.Usuario FROM dbo.USERS_TABLE ORDER BY  dbo.USERS_TABLE.Usuario");
    var resetToken = "";
    bool isSuccess = false;
    
    WebSecurity.RequireAuthenticatedUser();
    
    var action = Request.Form["action"];
    var usuario = Request.Form["usuarios"];

    if ( usuario == @WebSecurity.CurrentUserName)
    {
        Response.Redirect(Href("~/Account/Manage.cshtml"));
    }
    

    bool hasLocalAccount = OAuthWebSecurity.HasLocalAccount(WebSecurity.CurrentUserId);

    string successMessage = "";
    var message = Request.QueryString["message"];
    if (message == "ChangedPassword")
    {
        successMessage = "Su contraseña ha cambiado.";
    }
    else if (message == "SetPassword")
    {
        successMessage = "Su contraseña se ha establecido.";
    }

    // Validación de la instalación
    Validation.RequireField("newPassword", "El campo de contraseña nueva es obligatorio.");
    Validation.Add("confirmPassword",
        Validator.Required("El campo de confirmar contraseña es obligatorio."),
        Validator.EqualsTo("newPassword", "La nueva contraseña y la contraseña de confirmación no coinciden."));
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "La contraseña nueva debe contener al menos 6 caracteres"));

    if (IsPost)
    {
        AntiForgery.Validate();
        if (action == "password")
        {
            
            
            // Controlar operaciones de contraseña de cuenta local
            var newPassword = Request.Form["newPassword"];
            var confirmPassword = Request.Form["confirmPassword"];
            
            var token = WebSecurity.GeneratePasswordResetToken(usuario);

            if (Validation.IsValid())
            {
                if (hasLocalAccount)
                {
                    if (WebSecurity.ResetPassword(token, newPassword))
                    {
                        isSuccess = true;
                        if (isSuccess= true){
                            // Retroceder a la página principal y salir
                            message = @"<h3><i class='icon-thumbs-up fg-darker smaller'></i></a> La contraseña fue blanqueada correctamente <small class='on-right></small></h3>";
                        }
                                            }
                    else
                    {
                        ModelState.AddFormError("Se ha producido un error al intentar cambiar la contraseña. Póngase en contacto con el propietario del sitio.");
                    }
                }
            }
        }

    }
}

       <div class="row flex-center min-vh-100 py-6">
           <div class="col-sm-10 col-md-8 col-lg-6 col-xl-5 col-xxl-4"><a class="d-flex flex-center mb-4" href="#"><img class="me-2" src="../assets/img/logoc.ico" alt="" width="80" /><span class="font-sans-serif fw-bolder fs-5 d-inline-block">Confluencia</span></a>
            <div class="card">
              <div class="card-body p-4 p-sm-5">
                <h5 class="text-center">Modificar Contraseña</h5>
                <form class="mt-3">
                                  <div class="mb-3">
                    <label class="form-label"></label>
                                                         <select class="form-select" name="usuarios">
                                        <option selected value="" disabled>Seleccionar Usuario....</option>
                                        @foreach (var row in products)
                                        {
                                            <option value="@row.Usuario" @Validation.For("currentPassword")>@row.Usuario</option>
                                        }
                                        @Html.ValidationMessage("currentPassword")
                                    </select>
                  </div>
                  <div class="mb-3">
                                     @if (!ModelState.IsValidField("newPassword")) { <text> class="error-label" </text>      }
                                    <input class="form-control" type="password" id="newPassword" name="newPassword" placeholder="Nueva Contraseña" @Validation.For("newPassword") />
                                    @Html.ValidationMessage("newPassword")
                  </div>
                  <div class="mb-3">
                    @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text>      }
                                    <input class="form-control" type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirmar Contraseña" @Validation.For("confirmPassword") />
                                    @Html.ValidationMessage("confirmPassword")
                  </div>
                  <button class="btn btn-primary d-block w-100 mt-3" type="submit" name="action" value="password">Blanquear contraseña</button>
                </form>
              </div>
            </div>
          </div>
        </div>
