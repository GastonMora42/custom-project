@{
    var Usuario = WebSecurity.CurrentUserName;
    
    Layout = "_AccountLayout.cshtml";
    var db = Database.Open("IntranetConnectionNew");

    // Inicializar variables de página generales
    var password = "";
    var rememberMe = false;
    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) {
        // Algunos proveedores de inicio de sesión externo siempre requieren un valor URL devuelto
        returnUrl = Href("~/index.cshtml");
    }
    else {
        Response.Redirect("~/" + Request.Url.LocalPath);
    }    

// Setup validation
    Validation.RequireField("Usuario", "Debe especificar un nombre de usuario");
    Validation.RequireField("password", "Debe especificar una contraseña.");
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "La contraseña debe tener al menos seis caracteres"));

    // Si esta es una solicitud POST, valide y procese los datos
    if (IsPost) {
        AntiForgery.Validate();
        // ¿Se trata de una solicitud de inicio de sesión externo?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty()) {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        } else if (Validation.IsValid()) {
            Usuario = Request.Form["Usuario"];
            password = Request.Form["password"];
            

            if (WebSecurity.UserExists(Usuario) && WebSecurity.GetPasswordFailuresSinceLastSuccess(Usuario) > 4 && WebSecurity.GetLastPasswordFailureDate(Usuario).AddSeconds(60) > DateTime.UtcNow) {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Intentar iniciar sesión mediante las credenciales suministradas
            if (WebSecurity.Login(Usuario, password )) 
                {
                var entidad = db.QueryValue("SELECT Entidad FROM USERS_TABLE WHERE LOWER(Usuario) = LOWER(@0)", Usuario);
                Context.RedirectLocal(returnUrl);
                return;
                } 
            else 
                {
                ModelState.AddFormError("El nombre de usuario y la contraseña proporcionados son incorrectos.");
                }
        }
    }
}

        <div class="row flex-center min-vh-100 py-4">
          <div class="col-sm-10 col-md-8 col-lg-6 col-xl-5 col-xxl-4"><a class="d-flex flex-center mb-4" href="#"><img class="me-2" src="../assets/img/logoc.ico" alt="" width="80" /><span class="font-sans-serif fw-bolder fs-5 d-inline-block">Confluencia</span></a>
            <div class="card">
              <div class="card-body p-4 p-sm-5">
                <div class="row flex-between-center mb-2">
                  <div class="col-auto">
                        <h5>Log in</h5>
                    </div>
                   
                </div>
                    <form id ="loginform" class="form-signin" role="form" method="post">
                    @AntiForgery.GetHtml()
                    @* Si hay algún error de validación, mostrar un error *@
                    @Html.ValidationSummary("El inicio de sesión no se realizó correctamente. Corrija los errores e inténtelo de nuevo.", excludeFieldErrors: true, htmlAttributes: null)
                  <div class="mb-3">
                    <input class="form-control" type="text" placeholder="Usuario" type="text" id="Usuario" name="Usuario" required autofocus/>
                  </div>
                  <div class="mb-3">
                    <input class="form-control" type="password" id="password" name="password" placeholder="Password" required />
                  </div>

                  <div class="mb-3">
                    <button class="btn btn-primary d-block w-100 mt-3" type="submit" name="submit">Log in</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>